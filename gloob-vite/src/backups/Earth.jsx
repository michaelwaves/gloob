/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 earth.gltf
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

export default function Earth(props) {
  const { nodes, materials } = useGLTF('/earth.gltf')

  // create an object to store the materials with mesh names as keys
  let meshMaterials = [
    {
      id: "asia",
      material: materials.continent
    },
    {
      id: "south_america",
      material: materials.continent
    },
    {
      id: "australia",
      material: materials.continent
    },
    {
      id: "madagascar",
      material: materials.continent
    },
    {
      id: "indonesia",
      material: materials.continent
    },
    {
      id: "iceland",
      material: materials.continent
    },
    {
      id: "phillipines",
      material: materials.continent
    },
    {
      id: "indonesia001",
      material: materials.continent
    },
    {
      id: "papa_new_guinea",
      material: materials.continent
    },
    {
      id: "africa",
      material: materials.continent
    },
    {
      id: "north_america",
      material: materials.continent
    },
    {
      id: "europe",
      material: materials.continent
    },
    {
      id: "antarctica",
      material: materials.continent
    },
    {
      id: "north_america002",
      material: materials.continent

    },
    {
      id: "china",
      material: materials.continent
    },
    {
      id: "india",
      material: materials.continent
    }

  ]
  const ref = useRef();
  const [material, setMaterial] = useState(meshMaterials)
  useEffect(() => {
    console.log(materials)
    console.log(ref.current.id)
  }, [])
  const handleHover = (e) => {
    e.stopPropagation()
    console.log('hover')
    //e.target.material = materials.continent_selected
    let newMaterial = material.map((item) => {
      if (item.id === e.target.id) {
        item.material = materials.continent_selected
      }
      return item
    })
    setMaterial(newMaterial)
  }
  const handleLeave = (e) => {
    console.log('leave')
    //e.target.material = materials.continent
    let newMaterial = material.map((item) => {
      if (item.id === e.target.id) {
        item.material = materials.continent
      }
      return item
    })
    setMaterial(newMaterial)
  }

  return (
    <group {...props} dispose={null}>
      <mesh id="asia" geometry={nodes.asia.geometry} onPointerLeave={(e) => handleLeave(e)} onPointerEnter={(e) => handleHover(e)} material={material[0].material} scale={6.37} />

    </group>
  )
}

useGLTF.preload('/earth.gltf')
